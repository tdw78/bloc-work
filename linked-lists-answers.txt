1) One positive thing about linked lists is that they use up considerably 
   less memory than arrays.  Nodes of the linked list are not stored next to each
   other as is the case with arrays. Rather, the operating system find unused space in 
   memory and stores the new node there.

   One negative thing about using linked lists is that accessing elements in the list 
   takes much longer and is more difficult compared to arrays.

2) An example of a linked list in the real world is when customers are waiting in
   line at the DMV. Every customer is given a number and is not required to stand 
   in line. The number on the ticket deterimines who is next up.
     

  Coding Questions

 1)  The pseudocode does not contain code for which it can iterate through the 
     list and find the end of list. As is, the code will always add the new Node 
     to the head or right after the head.

     Functional code:

    class Node {
  constructor(value){
   this.value = value
   this.next = null
   }
 }

 class LinkedList {
   constructor(){
     this.head = null
     this.length = 0
  }

 push(value){
   let node = new Node(value)
     if (this.head === null) {
       this.head = node
     } else {
       let currentNode = this.head
       while (currentNode.next){
       currentNode = currentNode.next
    }
     currentNode.next = node
   }
     this.length++
  }


  reverse(){
    let current = this.head
    let previous = null
    let next = null
    
    while(current !== null) {
      next = current.next
      current.next = previous
      previous = current
      current = next
      this.head = previous
  }
     return previous
 }

 removeDuplicates(){
  let current = this.head
  
  while(current != null){
    let curr = current
    while(curr.next != null){
      if(curr.next.value == current.value){
          curr.next = curr.next.next
      } else {
          curr = curr.next
      }
    }
    current = current.next
  }
}

  print(){
    let currentNode = this.head
    let arr = []
    
    while(currentNode !== null){
      arr.push(currentNode.value)
      currentNode = currentNode.next
   }
      console.log(arr)
 }

}

let myNode = new LinkedList()
myNode.push(1)
myNode.push(2)
myNode.push(3)
myNode.push(1)
myNode.push(2)
myNode.push(4)

myNode.removeDuplicates()
myNode.print()